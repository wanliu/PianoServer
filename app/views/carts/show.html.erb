<div class='cart col-xs-12 col-sm-12 col-md-10 col-md-offset-1 col-lg-10 col-lg-offset-1'>
  <div class="page-header">
    <h1>购物车
      <small>
      清单(<span class='cart-item-count'><%= current_cart.items_count %></span>)
      </small>
    </h1>
  </div>

  <div class='no-padding'>
    <% if current_cart.items.blank? %>
      <h2>你的购物车是空的</h2>
    <% else %>
      <table class='table table-bordered' style='background-color: white;'>
        <colgroup>
          <col width='30%' />
          <col width='10%' />
          <col width='20%' />
          <col width='10%' />
          <col width='20%' />
        </colgroup>
        <tr>
          <td>商品</td>
          <td>单价</td>
          <td>数量</td>
          <td>金额</td>
          <td>操作</td>
        </tr>
      </table>
      <% groups = @items.group_by {|item| item.supplier } %>
      <% groups.each do |supplier, items| %>
        <%= render partial: 'cart_group', locals: { supplier: supplier, items: items } %>
      <% end %>
    <% end %>
  </div>
</div>

<script type="text/javascript">
  (function (argument) {
    // 点击全部选中时，将下属项全部选中
    $('.select-all').change(function (event) {
      var checked = $(this).prop('checked');
      $(this).parents('form').find(':checkbox').prop('checked', checked);

      var $group = $(this).parents('.cart-group');
      calculateGroupTotal($group);

      // if (checked) {
      //   $(this).parents('.cart').find('.confirm-order').removeAttr('disabled');
      // } else {
      //   $(this).parents('.cart').find('.confirm-order').attr('disabled', 'disabled');
      // }
    });

    // 当有一个取消选中时，取消全部选中；当所属项全部选中时，勾选全部选中按钮
    $('.avatar input:checkbox').change(function (event) {
      var checked = $(this).prop('checked');
      var allCheckbox = $(this).parents('form').find('.cart-item input:checkbox');

      var $group = $(this).parents('.cart-group');
      calculateGroupTotal($group);

      if (!checked) {
        $(this).parents('form').find('.select-all').prop('checked', false);

        var allUnChecked = _.all(allCheckbox, function(item) {
          return !$(item).prop('checked');
        });

        // if (allUnChecked) {
        //   $(this).parents('.cart').find('.confirm-order').attr('disabled', 'disabled');
        // }
      } else {
        // $(this).parents('.cart').find('.confirm-order').removeAttr('disabled');

        var allChecked = _.all(allCheckbox, function(item) {
          return $(item).prop('checked');
        });

        if (allChecked) {
          $(this).parents('form').find('.select-all').prop('checked', true);
        }
      }
    });

    // 修改所购商品数量
    $('.cart-item input[name=quantity]').keyup(function (event) {
      var quantity = $(this).val()

      if (!/^[1-9]\d*$/.test(quantity)) {
        quantity = 1;
      }

      var newQuantity = 1 * quantity;

      changeQuantity(this, newQuantity);
    });

    // 通过减少按钮，修改所购商品数量
    $('.cart-item').on('click', '.btn-minus', function (event) {
      var quantityInput = $(this).parents('.quantity').find('input');
      var quantity = 1 * $(quantityInput).val();

      if (quantity > 1) {
        var newQuantity = quantity - 1;
        changeQuantity(quantityInput, newQuantity);
      }
    });

    // 通过增加按钮，修改所购商品数量
    $('.cart-item').on('click', '.btn-plus', function (event) {
      var quantityInput = $(this).parents('.quantity').find('input');
      var quantity = 1 * $(quantityInput).val();
      var newQuantity = quantity + 1;

      changeQuantity(quantityInput, newQuantity);
    });

    function changeQuantity(quantityInput, quantity, reflect) {
      var $cartItem = $(quantityInput).parents('.cart-item:first'),
          cartItemId = $cartItem.data('cartItemId'),
          $quantity = $cartItem.find('input[name=quantity]'),
          $subTotal = $cartItem.find('.subtotal');
          $btnMinus = $cartItem.find('.btn-minus span'),
          $alert = $cartItem.find('.alert'),
          $group = $(quantityInput).parents('.cart-group');

      $quantity.val(quantity);

      if (+quantity > 1) {
        $btnMinus.addClass('glyphicon-minus');
      } else {
        $btnMinus.removeClass('glyphicon-minus');
      }

      $.post('/cart_items/' + cartItemId, {
        _method: 'PATCH',
        cart_item: {
          quantity: quantity,
        }
      }).done(function (data, xhr, status) {
        $subTotal.text(data.sub_total);
        $('.cart-item-count').text(data.ccount);

        $(document).trigger('cart_quantity_changed', [ data.ccount ])

        calculateGroupTotal($group);
        if (!reflect) $alert.hide();
      }).fail(function (data, xhr, status) {
        // usually caused by the lack of inventory
        var quanOpt = data.responseJSON && data.responseJSON.quantity;

        if (quanOpt) {
          var maxQuan = quanOpt[0];
          $alert.find('.max-quantity').text(maxQuan)
          $alert.show();

          changeQuantity(quantityInput, maxQuan, true);
        }
      });
    }

    function calculateGroupTotal($group) {
      if (!($group instanceof jQuery)) {
        $group = $($group);
      }

      var saleableSelected = _.filter($group.find('.cart-item.saleable'), function(item) {
        return $(item).find('.avatar :checkbox').prop('checked');
      });

      var totals = _.reduce(saleableSelected, function(mem, item) {
        var quantity = parseInt($(item).find('.quantity input').val(), 10);
        var total = parseFloat($(item).find('.subtotal').text().replace('¥', ''), 10);

        mem.quantity || (mem.quantity = 0);
        mem.total || (mem.total = 0);

        mem.quantity += quantity;
        mem.total += total;

        return mem;
      }, {});

      $group.find('.footer .total-quantity').text(totals.quantity || 0);
      $group.find('.footer .total-total').text(totals.total || 0);

      if (isNaN(totals.quantity) || totals.quantity == 0) {
        $group.find('.cart-submit').attr('type','button').css('opacity', 0.5);
      } else {
        $group.find('.cart-submit').attr('type','submit').css('opacity', 1);
      }
    }

    _.each($('.cart .cart-group'), calculateGroupTotal);
  })();
</script>